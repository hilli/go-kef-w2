VS Code REST Client

# KEF LS60 Wireless base URL
@baseurl = http://10.0.0.93
# KEF LSX II Wireless base URL
@baseurl = http://10.0.0.143

# roles define if you get the value part of the response or the whole response
# when you are pulling data from the speaker. setData only accepts value, sensibly enough.
# Possible values are:
# value = only the value
# @all = the whole response

# For the GET calls, use URL encoding
# %40 is @ in URL encoding
# @roles = value
@roles = %40all

# For the POST calls, do not use URL encoding
# @postroles = value
@postroles = @all

# Some, but not all, data retrival request work with POST as well as GET

### Get Poll Queue ???
GET {{baseurl}}/api/event/pollQueue
Accept: application/json
Content-Type: application/json

### Get poll Queue ID
GET {{baseurl}}/api/event/pollQueue?queueId=%7B35bb7b73-13aa-4e69-8c28-02e26acca869%7D&timeout=5
Accept: application/json
Content-Type: application/json

### Get player data
GET {{baseurl}}/api/getData?roles={{roles}}&path=player%3Aplayer%2Fdata
Accept: application/json
Content-Type: application/json

### Get player data (large object if playing)
GET {{baseurl}}/api/getRows?roles={{roles}}&from=0&to=9&path=airable%3AplayContext%3Ahttps%3A%2F%2F8448239770.airable.io%2Fid%2Ftidal%2Ftrack%2F37944910
Accept: application/json
Content-Type: application/json


### Get Primary MAC Address (Wired)
POST {{baseurl}}/api/getData
Accept: application/json
Content-Type: application/json

{
  "path": "settings:/system/primaryMacAddress", 
  "roles": "{{postroles}}"
}

### Get Network Info
GET {{baseurl}}/api/getData?path=network%3Ainfo&roles={{roles}}
Accept: application/json
Content-Type: application/json


### Get Device Name
POST {{baseurl}}/api/getData
Accept: application/json
Content-Type: application/json

{
  "path": "settings:/deviceName", 
  "roles": "{{postroles}}"
}

### Get Device Status
# Possible Statuses are:
# standby or powerOn
POST {{baseurl}}/api/getData
Accept: application/json
Content-Type: application/json

{
  "path": "settings:/kef/host/speakerStatus", 
  "roles": "{{postroles}}"
}

### Get Device Source
# Possible Sources are:
# standby (not powered on), wifi, bluetooth, tv, optic, coaxial or analog (aux in KEF Control)
POST {{baseurl}}/api/getData
Accept: application/json
Content-Type: application/json

{
  "path": "settings:/kef/play/physicalSource", 
  "roles": "{{postroles}}"
}

### Set Device Source
# Possible Sources are:
# standby (not powered on), wifi, bluetooth, tv, optic, coaxial or analog (aux in KEF Control)
POST {{baseurl}}/api/setData
Accept: application/json
Content-Type: application/json

{
  "path": "settings:/kef/play/physicalSource", 
  "roles": "value",
  "value": {
    "type": "kefPhysicalSource",
    "kefPhysicalSource": "tv"
  }
}

### Get Volume
POST {{baseurl}}/api/getData
Accept: application/json
Content-Type: application/json

{
  "path": "player:volume",
  "roles": "{{postroles}}"
}

### Set Volume
POST {{baseurl}}/api/setData
Accept: application/json
Content-Type: application/json

{
  "path": "player:volume",
  "roles": "value",
  "value": {
    "type": "i32_",
    "i32_": 15
  }
}

### Mute Volume (There is a specific mute command, but this works too)
# Aka set volume to 0
# 'true' is returned if successful (+200 OK)
POST {{baseurl}}/api/setData
Accept: application/json
Content-Type: application/json

{
  "path": "player:volume",
  "roles": "value",
  "value": {
    "type": "i32_",
    "i32_": 24
  }
}

### Play/Pause media
POST {{baseurl}}/api/setData
Accept: application/json
Content-Type: application/json

{
  "path":"player:player\/control",
  "role":"activate",
  "value": {
    "control":"pause"
  }
}


### Song Progress
POST {{baseurl}}/api/getData
Accept: application/json
Content-Type: application/json

{
  "path": "player:player/data/playTime",
  "roles": "{{postroles}}"
}

### Player data (large object if playing)
POST {{baseurl}}/api/getData
Accept: application/json
Content-Type: application/json

{
  "path": "player:player/data",
  "roles": "{{postroles}}"
}

### Set Device Name
POST {{baseurl}}/api/setData
Accept: application/json
Content-Type: application/json

{
  "path": "settings:\/deviceName",
  "roles": "value",
  "value": {
    "type": "string_",
    "string_": "KEFs"
  }
}

### Get Device Profile
POST {{baseurl}}/api/getData
Accept: application/json
Content-Type: application/json

{
  "path": "kef:eqProfile/v2",
  "roles": "{{postroles}}"
}

### Get messages from the queue
POST {{baseurl}}/api/getRows
Accept: application/json
Content-Type: application/json

{
  "from": 0,
  "to": 0,
  "path": "notifications:/display/queue",
  "roles": "{{postroles}}"
}

### Is front standby LED disabled?
POST {{baseurl}}/api/getData
Accept: application/json
Content-Type: application/json

{
  "path": "settings:/kef/host/disableFrontStandbyLED",
  "roles": "{{postroles}}"
}

### GoogleCast Usage Report (Google Cast state)
GET {{baseurl}}/api/getData?path=googlecast%3AusageReport&roles={{roles}}
Accept: application/json
Content-Type: application/json

### Bluetooth Usage Report (Bluetooth state)
GET {{baseurl}}/api/getData?path=bluetooth%3Astate&roles={{roles}}
Accept: application/json
Content-Type: application/json

### Get play queue items limit
GET {{baseurl}}/api/getData?path=settings%3A%2Fplaylists%2FdbItemsLimit&roles={{roles}}
Accept: application/json
Content-Type: application/json

### Get current DSP settings
# roles=@all makes most sense here, otherwise you get a rows array with
# arrays with one element in each, order dependent.
GET {{baseurl}}/api/getRows?path=kef%3Adsp%2FeditValue&roles=%40all&from=0&to=99
Accept: application/json
Content-Type: application/json

### Set app analytics
POST {{baseurl}}/api/setData
Accept: application/json
Content-Type: application/json

{
  "path": "settings:\/kef\/host\/disableAppAnalytics",
  "role": "value",
  "value": {
    "type": "bool_",
    "bool_": false
  }
}

### Get standby time
GET {{baseurl}}/api/getData?roles={{roles}}&path=settings%3A%2Fkef%2Fhost%2FstandbyMode
Accept: application/json
Content-Type: application/json

### Set standby time
# Possible values are:
# standby_20mins, standby_30mins, standby_60mins, standby_none
POST {{baseurl}}/api/setData
Accept: application/json
Content-Type: application/json

{
  "path": "settings:\/kef\/host\/standbyMode",
  "role": "value",
  "value": {
    "type": "kefStandbyMode",
    "kefStandbyMode": "standby_30mins"
  }
}

### Get secondary wakeup source
# Possible values are:
# wakeup_default, tv, optical, coaxial, analog, bluetooth
GET {{baseurl}}/api/getData?roles={{roles}}&path=settings%3A%2Fkef%2Fhost%2FwakeUpSource
Accept: application/json
Content-Type: application/json

### Set secondary wakeup source
# Possible values are:
# wakeup_default (or none), tv, optical, coaxial, analog, bluetooth
POST {{baseurl}}/api/setData
Accept: application/json
Content-Type: application/json

{
  "path": "settings:\/kef\/host\/wakeUpSource",
  "role": "value",
  "value": {
    "type": "kefWakeUpSource",
    "kefWakeUpSource": "wakeup_default"
  }
}

### Get statup tone for sources
GET {{baseurl}}/api/getData?roles={{roles}}&path=settings%3A%2Fkef%2Fhost%2FstartupTone
Accept: application/json
Content-Type: application/json

### Set statup tone for sources
POST {{baseurl}}/api/setData
Accept: application/json
Content-Type: application/json

{
  "path": "settings:\/kef\/host\/startupTone",
  "role": "value",
  "value": {
    "type": "bool_",
    "bool_": false
  }
}

### Get cabled (vs wireless) mode
GET {{baseurl}}/api/getData?roles={{roles}}&path=settings%3A%2Fkef%2Fhost%2FcableMode
Accept: application/json
Content-Type: application/json

### Set cabled mode on or off
# Possible values are:
# wired, wireless
POST {{baseurl}}/api/setData
Accept: application/json
Content-Type: application/json

{
  "path": "settings:\/kef\/host\/cableMode",
  "role": "value",
  "value": {
    "type": "kefCableMode",
    "kefCableMode":"wired"
  }
}

### Firmware upgrade status (Updates every 5 seconds, when polling)
GET {{baseurl}}/api/getData?path=kef%3Afwupgrade%2Finfo&roles={{roles}}
Accept: application/json
Content-Type: application/json

### Get group members
# Apparently this is a list of all the speakers in the group
# And the only place to get the speaker ID of which the first segment is the model.
GET {{baseurl}}/api/getRows?path=grouping%3Amembers&roles={{roles}}&from=0&to=19
Accept: application/json
Content-Type: application/json

### Get Max Volume Value
GET {{baseurl}}/api/getData?path=settings%3A%2Fkef%2Fhost%2FmaximumVolume&roles={{roles}}
Accept: application/json
Content-Type: application/json

### Get firmware version
GET {{baseurl}}/api/getData?roles={{roles}}&path=settings%3A%2Freleasetext
Accept: application/json
Content-Type: application/json

### Are we muted?
GET {{baseurl}}/api/getData?roles={{roles}}&path=settings%3A%2FmediaPlayer%2Fmute
Accept: application/json
Content-Type: application/json
